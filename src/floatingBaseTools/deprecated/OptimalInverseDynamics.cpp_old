/*
 * OptimalInverseDynamics.cpp
 *
 *  Created on: Nov 19, 2011
 *      Author: righetti
 */

#include <boost/chrono.hpp>

#include "OptimalInverseDynamics.h"

#include "parallelizable_kinematics_utilities.h"

namespace floating_base_utilities
{

OptimalInverseDynamics::OptimalInverseDynamics()
{
  num_joints_ = n_dofs;
  num_end_effectors_ = n_endeffs;
  num_floating_dofs_ = num_joints_ + 6;
  num_constraints_ = 0;

  pseudo_inverse_weight_ = my_matrix(1, num_joints_, 1, num_joints_);
  full_constraint_weight_ = my_matrix(1, num_floating_dofs_, 1, num_floating_dofs_);

  command_cost_weight_ = my_matrix(1, num_joints_, 1, num_joints_);
  constraint_cost_weight_ = my_matrix(1, 6*num_end_effectors_, 1, 6*num_end_effectors_);
  mat_eye(command_cost_weight_);
  mat_zero(constraint_cost_weight_);

  //Allocate some matrices
  Jc_ = my_matrix(1, 6*num_end_effectors_, 1, num_floating_dofs_);
  dJc_ = my_matrix(1, 6*num_end_effectors_, 1, num_floating_dofs_);
  previous_Jc_ = my_matrix(1, 6*num_end_effectors_, 1, num_floating_dofs_);
  Jc_pinv_ = my_matrix(1, num_floating_dofs_, 1, 6*num_end_effectors_);
  null_Jc_ = my_matrix(1, num_floating_dofs_, 1, num_floating_dofs_);

  torque_projector_ = my_matrix(1, num_joints_, 1, num_floating_dofs_);
  contact_projector_ = my_matrix(1, 6*num_end_effectors_, 1, num_floating_dofs_);

  reaction_forces_ = my_vector(1, 6*num_end_effectors_);
  desired_torques_ = my_vector(1, num_joints_);

  valid_jacobian_ = false;
  previous_constraints_ = my_imatrix(1, num_end_effectors_, 1, 6);
  mat_izero(previous_constraints_);
}

OptimalInverseDynamics::~OptimalInverseDynamics()
{
  my_free_matrix(pseudo_inverse_weight_, 1, num_joints_, 1, num_joints_);
  my_free_matrix(full_constraint_weight_, 1, num_floating_dofs_, 1, num_floating_dofs_);
  my_free_matrix(command_cost_weight_, 1, num_joints_, 1, num_joints_);
  my_free_matrix(constraint_cost_weight_, 1, 6*num_end_effectors_, 1, 6*num_end_effectors_);

  my_free_vector(desired_torques_, 1, num_joints_);
  my_free_vector(reaction_forces_, 1, 6*num_end_effectors_);

  my_free_matrix(Jc_, 1, 6*num_end_effectors_, 1, num_floating_dofs_);
  my_free_matrix(previous_Jc_, 1, 6*num_end_effectors_, 1, num_floating_dofs_);
  my_free_matrix(dJc_, 1, 6*num_end_effectors_, 1, num_floating_dofs_);
  my_free_matrix(Jc_pinv_, 1, num_floating_dofs_, 1, 6*num_end_effectors_);
  my_free_matrix(null_Jc_, 1, num_floating_dofs_, 1, num_floating_dofs_);

  my_free_matrix(torque_projector_, 1, num_joints_, 1, num_floating_dofs_);
  my_free_matrix(contact_projector_, 1, 6*num_end_effectors_, 1, num_floating_dofs_);

  my_free_imatrix(previous_constraints_, 1, num_end_effectors_, 1, 6);
}

void OptimalInverseDynamics::getPredictedReactionForces(Vector reaction_forces)
{
  vec_equal(reaction_forces_, reaction_forces);
}

void OptimalInverseDynamics::setTorqueAndContactWeights(Matrix command_weight, Matrix constraint_weight)
{
  mat_equal(command_weight, command_cost_weight_);
  mat_equal(constraint_weight, constraint_cost_weight_);
}

void OptimalInverseDynamics::computeJacobianQR(Matrix Q, Matrix Qu, Matrix R_inverse)
{
  MY_VECTOR(sv, 1, num_floating_dofs_);
  MY_MATRIX(U,1,num_constraints_,1,num_floating_dofs_);
  // compute an orthonormal basis of the constraint Jacobian  with SVD
  mat_equal_size(Jc_,num_constraints_,num_floating_dofs_,U);
  my_svdcmp(U, num_constraints_, num_floating_dofs_, sv, Q);

  // sort the columns of U and Q according to w coefficients
  double aux;
  for (int j=1; j<=num_floating_dofs_; ++j)
    for (int i=1; i<=num_floating_dofs_-j; ++i)
      if (sv[i] < sv[i+1]) {
        for (int n=1; n<=num_floating_dofs_; ++n) {
          aux = Q[n][i];
          Q[n][i] = Q[n][i+1];
          Q[n][i+1] = aux;
        }
        for (int n=1; n<=num_constraints_; ++n) {
          aux = U[n][i];
          U[n][i] = U[n][i+1];
          U[n][i+1] = aux;
        }
        aux = sv[i];
        sv[i]=sv[i+1];
        sv[i+1]=aux;
      }

  for(int i=1; i<=num_floating_dofs_; ++i)
    for(int j=1; j<=num_unconstrained_dimensions_; ++j)
      Qu[i][j] = Q[i][num_constraints_ + j];

  //compute inverse of R
  // Jc = U S V'; J' = Q R; thus J' = V S U', and V = Q, S U' = R and R-1 = U S-1
  //TODO use some regularization in case the Jacobian is close to singular
  for (int i=1; i<=num_constraints_; ++i)
    for (int j=1; j<=num_constraints_; ++j)
    {
      R_inverse[i][j] = U[i][j]*1/sv[j];
    }

}

bool OptimalInverseDynamics::prepareInverseDynamics(SL_Jstate* j_state, SL_endeff* end_effectors , SL_Cstate& base_state, SL_quat& base_orient, bool prepare_jc)
{
  //get the constrained Jacobian
  int dummy;

  MY_MATRIX(ju_sl, 1, 6*n_endeffs, 1, num_floating_dofs_);
  parallelizable_kinematics_utilities::computeConstraintJacobian_parallel(j_state, &base_state, &base_orient, end_effectors, Jc_, &num_constraints_, &dummy, ju_sl);
  //  computeConstraintJacobian(j_state, &base_state, &base_orient, end_effectors, Jc_, &num_constraints, &dummy);
  if(!prepare_jc)
  {
    valid_jacobian_ = false;
  }
  else
  {
    for(int i=1; i<=num_end_effectors_; ++i)
    {
      for(int j=1; j<=6; ++j)
      {
        if(end_effectors[i].c[j] != previous_constraints_[i][j])
        {
          valid_jacobian_ = false;
          previous_constraints_[i][j] = end_effectors[i].c[j];
        }
      }
    }
  }
  num_unconstrained_dimensions_ = num_floating_dofs_ - num_constraints_;


  if(num_constraints_ < 6)
  {
    printf("ERROR constraints = %d < 6- not implemented yet how to deal with that.", num_constraints_);
    return false;
  }


  //compute the QR decomposition of the Jacobian
  MY_MATRIX(Q, 1, num_floating_dofs_, 1, num_floating_dofs_);
  MY_MATRIX(Qu, 1, num_floating_dofs_, 1, num_unconstrained_dimensions_);
  MY_MATRIX(R_inverse, 1, num_constraints_, 1, num_constraints_);
  computeJacobianQR(Q, Qu, R_inverse);


  //compute the contact projector
  MY_MATRIX(contact_proj, 1, num_constraints_, 1, num_floating_dofs_);
  mat_mult_normal_transpose_size(R_inverse, num_constraints_, num_constraints_, Q, num_floating_dofs_, num_constraints_, contact_proj);
  int index = 1;
  mat_zero(contact_projector_);
  for(int i=1; i<=num_end_effectors_; ++i)
  {
    for(int j=1; j<=6; ++j)
    {
      //copy the indexed line of contact_proj to contact projector
      if(end_effectors[i].c[j])
      {
        for(int k=1; k<=num_floating_dofs_; ++k)
        {
          contact_projector_[(i-1)*6 + j][k] = contact_proj[index][k];
        }
        ++index;
      }
    }
  }


  //compute the pseudo inverse of the constraint Jacobian
  //compute R^-1 * Q^T
  MY_MATRIX(invRQT, 1, num_floating_dofs_, 1, num_floating_dofs_);
  mat_eye(invRQT);
  for(int i=1; i<num_constraints_; ++i)
  {
    for(int j=1; j<=num_constraints_; ++j)
    {
      invRQT[i][j] = R_inverse[i][j];
    }
  }
  mat_mult_normal_transpose(invRQT, Q, invRQT);


  //compute the weight
  if(!updatePseudoInverseWeight(end_effectors, invRQT))
  {
    printf("cannot update weights.");
    return false;
  }

  //compute the pseudo inverse
  MY_MATRIX(Pseudo_Inv, 1, num_joints_, 1, num_unconstrained_dimensions_);
  MY_MATRIX(Proj_SuQTST, 1, num_unconstrained_dimensions_, 1, num_unconstrained_dimensions_);
  MY_MATRIX(W_STQSuT, 1, num_joints_, 1, num_unconstrained_dimensions_);

  //now we can compute the weighted pseudo inverse
  MY_MATRIX(ST, 1, num_floating_dofs_, 1, num_joints_);
  mat_eye(ST);
  MY_MATRIX(SuQTST, 1, num_unconstrained_dimensions_, 1, num_joints_);
  //  mat_trans_size(Qu, num_joints_, num_unconstrained_dimensions_, SuQTST);
  mat_mult_transpose_normal(Qu, ST, SuQTST);

  mat_mult_normal_transpose(pseudo_inverse_weight_, SuQTST, W_STQSuT);
  mat_mult_normal_normal(SuQTST, W_STQSuT, Proj_SuQTST);
  if (!my_inv_ludcmp(Proj_SuQTST, num_unconstrained_dimensions_, Proj_SuQTST)) {
    printf("ERROR>>ComputeInverseDynamics cannot get pseudo inverse\n");
    return false;
  }

  mat_mult_normal_normal(W_STQSuT, Proj_SuQTST, Pseudo_Inv);

  //we now have the projector in torque space
  mat_mult_normal_transpose(Pseudo_Inv, Qu, torque_projector_);


  //we also compute the internal torques projector times W1/2 = Nw sqrt(W)
  MY_MATRIX(nullspace_projector, 1, num_joints_, 1, num_floating_dofs_);
  mat_zero(nullspace_projector);
  mat_mult_size(Pseudo_Inv, num_joints_, num_unconstrained_dimensions_, SuQTST, num_unconstrained_dimensions_, num_joints_, nullspace_projector);
  mat_mult_scalar(nullspace_projector, -1, nullspace_projector);
  for(int i=1; i<=num_joints_; ++i) {
    nullspace_projector[i][i] += 1;
  }
  mat_mult_size(nullspace_projector, num_joints_, num_joints_, pseudo_inverse_weight_, num_joints_, num_joints_, nullspace_projector);
  mat_mult(nullspace_projector, full_constraint_weight_, nullspace_projector);

  mat_add(nullspace_projector, torque_projector_, torque_projector_);


  //compute Jacobian stuff for operational space people
  if(prepare_jc)
  {
    updateConstraintJacobianValues(Q, R_inverse);
  }


  return true;
}

void OptimalInverseDynamics::updateConstraintJacobianValues(Matrix Q, Matrix R_inverse)
{
  //compute the derivative of the Jacobian if the previous Jacobian is valid and it was asked for
  if(valid_jacobian_)
  {
    mat_sub(Jc_, previous_Jc_, dJc_);
    mat_mult_scalar(dJc_, double(task_servo_rate), dJc_);
  }
  else
  {
    mat_zero(dJc_);
    valid_jacobian_ = true;
  }

  //compute the pseudo inverse
  mat_zero(Jc_pinv_);
  //get R transpose
  for(int i=1; i<=num_constraints_; ++i)
  {
    for(int j=1; j<=num_constraints_; ++j)
    {
      Jc_pinv_[i][j] = R_inverse[j][i];
    }
  }
  mat_mult(Q, Jc_pinv_, Jc_pinv_);

  //compute the nullspace projector
  mat_mult(Jc_pinv_, Jc_, null_Jc_);
  mat_mult_scalar(null_Jc_, -1, null_Jc_);
  for(int i=1; i<=num_floating_dofs_; ++i)
  {
    null_Jc_[i][i] += 1.0;
  }


  //save Jc in previous Jc
  mat_equal(Jc_, previous_Jc_);
}


void OptimalInverseDynamics::computeTorques(SL_DJstate* des_joint_state, SL_endeff* end_effectors , SL_Cstate& base_state, SL_quat& base_orient)
{
  //compute the full inverse dynamics
  MY_VECTOR(Mddq_h, 1, num_floating_dofs_);
  MY_VECTOR(fbase, 1, 6);
  parallelizable_kinematics_utilities::SL_InvDynNEBase_parallel(NULL, des_joint_state, end_effectors, &base_state, &base_orient, fbase);

  //get the full Mddq + h without local contributions
  for(int i=1; i<=num_joints_; ++i)
  {
    Mddq_h[i] = des_joint_state[i].uff;
  }
  for(int i=1; i<=6; ++i)
  {
    Mddq_h[i+num_joints_] = fbase[i];
  }

  //project ID to torques
  mat_vec_mult(torque_projector_, Mddq_h, desired_torques_);

  //set the ID with local contributions
  for(int i=1; i<=num_joints_; ++i)
  {
    des_joint_state[i].uff = desired_torques_[i] +
        des_joint_state[i].thd*links[i].vis +
        COULOMB_FUNCTION(des_joint_state[i].thd)*links[i].coul +
        des_joint_state[i].th * links[i].stiff +
        links[i].cons;
  }

  //compute the predicted reaction forces
  for(int i=1; i<=num_joints_; ++i)
  {
    Mddq_h[i] -= desired_torques_[i];
  }
  mat_vec_mult(contact_projector_, Mddq_h, reaction_forces_);

  //compute the predicted costs
  MY_VECTOR(temp, 1, 6*num_end_effectors_);
  mat_vec_mult(constraint_cost_weight_, reaction_forces_, temp);
  predicted_constraint_cost_ = vec_mult_inner(reaction_forces_, temp);

  MY_VECTOR(temp2, 1, num_joints_);
  mat_vec_mult(command_cost_weight_, desired_torques_, temp2);
  predicted_command_cost_ = vec_mult_inner(desired_torques_, temp2);
}

bool OptimalInverseDynamics::computeInverseDynamics(SL_DJstate* des_joint_state, SL_endeff* end_effectors,
                                                    SL_Cstate& base_state, SL_quat& base_orient)
{
  SL_Jstate joint_st[num_joints_+1];
  for(int i=1; i<=num_joints_; ++i)
  {
    //don't copy the rest since we are only interested in the kinematics
    joint_st[i].th = des_joint_state[i].th;
  }
  if(!prepareInverseDynamics(joint_st, end_effectors, base_state, base_orient, false))
  {
    return false;
  }

  computeTorques(des_joint_state, end_effectors, base_state, base_orient);


  return true;
}

bool OptimalInverseDynamics::updatePseudoInverseWeight(SL_endeff* end_effectors, Matrix invRQT)
{
  mat_eye(full_constraint_weight_);
  int constrained_dim[6*num_end_effectors_ + 1];
  int index = 1;
  for(int i = 1; i<=num_end_effectors_; ++i)
  {
    for(int j=1; j<=6; ++j)
    {
      //check which dimensions get constrained
      if(end_effectors[i].c[j])
      {
        constrained_dim[6*(i-1) + j] = index;
        ++index;
      }
      else
      {
        constrained_dim[6*(i-1) + j] = 0;
      }
    }
  }
  for(int i=1; i<=6*num_end_effectors_; ++i)
  {
    for(int j=1; j<=6*num_end_effectors_; ++j)
    {
      if(constrained_dim[i] > 0 && constrained_dim[j] > 0)
      {
        full_constraint_weight_[constrained_dim[i]][constrained_dim[j]] = constraint_cost_weight_[i][j];
      }
    }
  }

  mat_mult(full_constraint_weight_, invRQT, full_constraint_weight_);
  mat_mult_transpose_normal(invRQT, full_constraint_weight_, full_constraint_weight_);
  mat_add_size(full_constraint_weight_, command_cost_weight_, num_joints_, num_joints_, pseudo_inverse_weight_);

  //      if(!my_inv_ludcmp(pseudo_inverse_weight_, num_joints_, pseudo_inverse_weight_))
  if(!computeInversePDMatrix(pseudo_inverse_weight_))
  {
    printf("error inverting weight matrix!!");
    return false;
  }

  return true;
}

bool OptimalInverseDynamics::computeInversePDMatrix(Matrix W)
{
  //get the Cholesky decomposition of the positive definite W
  double diag[num_joints_+1];
  if(!my_choldc(W, num_joints_, diag))
  {
    printf("computeInversePDMatrix << error cannot compute the Cholesky decomp.");
    return false;
  }

  //compute the inverse of L (which is given in the lower part of W
  for(int i=1; i<=num_joints_; ++i)
  {
    W[i][i] = 1/diag[i];
    for(int j=1+i; j<=num_joints_; ++j)
    {
      double sum = 0.0;
      for(int k=i; k<=j-1; ++k)
      {
        sum-=W[j][k]*W[k][i];
      }
      W[j][i] = sum/diag[j];
    }
  }

  MY_MATRIX(invL, 1, num_joints_, 1, num_joints_);
  for(int i=1; i<=num_joints_; ++i)
    for(int j=i; j<=num_joints_; ++j)
      invL[j][i] = W[j][i];


  //get the inverse W-1 = L-T * L-1
  for(int i=1; i<=num_joints_; ++i)
    for(int j=i; j<=num_joints_; ++j)
    {
      double sum = 0.0;
      for(int k=j; k<=num_joints_; ++k)
        sum += invL[k][i] * invL[k][j];
      W[i][j] = sum;
      W[j][i] = sum;
    }

  return true;
}

void OptimalInverseDynamics::getConstraintJacobian(Matrix Jc, Matrix dJc, Matrix Jc_pinv, Matrix null_Jc)
{
  mat_equal(Jc_, Jc);
  mat_equal(dJc_, dJc);
  mat_equal(Jc_pinv_, Jc_pinv);
  mat_equal(null_Jc_, null_Jc);
}

} /* namespace inverse_dynamics */
